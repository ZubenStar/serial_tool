name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送v开头的标签时触发，例如 v1.0.0
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write  # 允许创建release和上传文件

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Run unit tests
      run: |
        python test_serial.py
      continue-on-error: false
    
    - name: Run performance tests
      run: |
        python test_performance.py
      continue-on-error: false
    
    - name: Create logs directory for packaging
      run: |
        New-Item -ItemType Directory -Force -Path logs
    
    - name: Add build timestamp to VERSION
      run: |
        $version = Get-Content VERSION -Raw
        $version = $version.Trim()
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        # Get timezone offset
        $offset = [System.TimeZoneInfo]::Local.GetUtcOffset([DateTime]::Now)
        $hours = $offset.Hours
        $minutes = [Math]::Abs($offset.Minutes)
        $tzStr = "UTC{0:+00;-00}:{1:00}" -f $hours, $minutes
        $buildTimeWithTz = "$buildTime $tzStr"
        "$version`n$buildTimeWithTz" | Set-Content VERSION -NoNewline
        Write-Host "Added build time: $buildTimeWithTz to version $version"
      shell: pwsh
        
    - name: Build executable
      run: |
        pyinstaller --clean serial_tool.spec
    
    - name: Restore VERSION file
      run: |
        $content = Get-Content VERSION -Raw
        $version = ($content -split "`n")[0].Trim()
        $version | Set-Content VERSION -NoNewline
        Write-Host "Restored VERSION to: $version"
      shell: pwsh
      if: always()
        
    - name: Rename executable to Chinese name
      run: |
        Move-Item dist/SerialMonitorTool.exe "dist/串口监控工具.exe"
        
    - name: Create logs directory in dist
      run: |
        New-Item -ItemType Directory -Force -Path dist/logs
        
    - name: Copy README to dist
      run: |
        Copy-Item README.md dist/
        
    - name: Create ZIP package
      run: |
        Compress-Archive -Path dist/* -DestinationPath "SerialMonitorTool-Windows-x64.zip"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: SerialMonitorTool-Windows-x64.zip
        
    - name: Get version from tag
      id: get_version
      run: |
        if ($env:GITHUB_REF -match 'refs/tags/(.*)') {
          $version = $matches[1]
        } else {
          $version = "dev"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
      shell: pwsh
        
    - name: Generate Release Notes
      id: release_notes
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/github-script@v7
      with:
        script: |
          const { data } = await github.rest.repos.generateReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.ref.replace('refs/tags/', ''),
          });
          
          const header = `## 📦 串口监控工具 ${context.ref.replace('refs/tags/', '')}

          ### 📥 快速开始
          1. 下载 **SerialMonitorTool-Windows-x64.zip**
          2. 解压到任意目录
          3. 双击运行 **串口监控工具.exe**

          ### 💻 系统要求
          - Windows 7/8/10/11 (64位)
          - 无需安装Python或其他依赖

          ---

          `;
          
          return header + data.body;
        result-encoding: string
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: SerialMonitorTool-Windows-x64.zip
        name: 串口监控工具 ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.result }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}